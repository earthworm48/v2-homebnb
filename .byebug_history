c
@booking.end_date.inspect
@booking.end_date.to_date
@booking.end_date 
@booking.end_date.to_date 
@booking.end_date.to_date - @booking.start_date.to_date
@booking.end_date - @booking.start_date
@booking.end_date
c
params
c
@booking.listing.price_per_night
c
params
c
params
c
params
c
params
c
params
c
params
c
params
c
params
c
params
c
params
c
params
c
params
c
params
c
nonce
c
params
c
@token
c
params
c
@token
c
nonce
n
params
@token
params[:payment_method_nonce]
params
c
Listing.search(params[:term], fields: ["city"], mispellings: {below: 5})
params[:term]
params
c
params
exit
c
exit
c
gon.unavailable_dates
c
gon.unavailable_dates
c
gon.unavailable_dates
c
gon.unavailable_dates
c
gon.unavailable_dates
c
gon.unavailable_dates
c
gon.unavailable_dates
gon.@unavailable_dates
c
@unavailable_dates
@unavailable_dates.flatten!
@unavailable_dates
n
@unavailable_dates
c
@unavailable_dates.flatten
@unavailable_dates
c
ad
ad = booking.end_date.to_date
sd
ed
c
c = booking.start_date.to_date
ed
ed = booking.start_date.to_date
booking.start_date.to_date
ed
sd
@unavailable_dates
c
@unavailable_dates
c
ed
sd
(sd..ed).map{|date| date.strftime("%d-%m-%Y")}
(sd..ed).map {|date| date.strftime("%d-%m-%Y")}
(sd..ed).map {|date| date}
(sd..ed).each {|date| date}
date
@unavailable_dates
c
(sd..ed).map
@unavailable_dates
ed
sd
finish
start
c
booking.end_date.to_date
s
@unavailable_dates
c
@listings.blank?
@listings.all.count
@listings.nil?
@listings
@listing
@listings.nil?
c
@listing.nil?
if @listings end
@listings
exit
Listing.search(params[:term]).count
Listing.search params[:term]
@error = "No result is found"
unless @listings
end
@listings = Listing.search params[:q]
else
@listings = []
if params[:q].blank?
params
c
params
params[:q]
c
Listing.__elasticsearch__.refresh_index!
Article.__elasticsearch__.refresh_index!
@listings.count
@listings
@listing
c
@listing
c
@error
@listing
c
params[:q].blank?
params[:q]
params
c
Listing.search params[:q]
params[:q].blank?
params[:q].empty?
params[:q].empty
params[:q].present?
params[:q].nil?
params.present?
params.nil
params.nil?
params
params[:q]
c
params[:id]
params
c
params[:id]
c
params
c
params[:user_id]
params[:id]
params
c
booking_params 
@booking2 = Booking.new(booking_params, nonce: 123)
@booking2 = Booking.new(booking_params, nonce: "123")
@booking2 = Booking.new(booking_params).merge(nonce: 123)
@booking2 = Booking.new(booking_params).merge(nonce: "123")
@booking2 = Booking.new(booking_params).merge(nonce: params[:payment_method_nonce])
@booking2 = Booking.new(booking_params).merge(nonce: params[payment_method_nonce])
 params[:payment_method_nonce]
@booking2 = Booking.new(booking_params).merge(nonce: params[ params[:payment_method_nonce]
params[:payment_method_nonce]
params[:payment_method_nonce[
@booking2
@booking2 = Booking.new(booking_params, "nonce" => params[:payment_method_nonce])
@booking = Booking.new(booking_params, "nonce" => params[:payment_method_nonce])
@booking = Booking.new(booking_params, "nonce" => params[:payment_method_nonce]
booking_params
@booking
c
@listing
params
Booking.column_names
booking_params
c
params
nonce
:payment_method_nonce
result.errors
result.transaction
result.transaction.processor_response_text
result.transaction.processor_response_code
result.transaction.processor_response
result.transaction.id
result.transaction
result
exit
c
listing.avatars.length == 0
listing.avatars.length
listing.avatars.nil?
listing.avatars
c
@listing
exit
c
listing_params
c
n
params[:id]
c
params
c
n
@listing
n
@listing
n
listing_params
c
n
@listing
c
n
c
@listing
c
n
@listing
n
c
